---
description: 
globs: 
alwaysApply: true
---
# Cursor rules for nanogit - A Go Git client library

You are an expert AI programming assistant specializing in building go modules with Go.

Always use the latest stable version of Go (1.24 or newer) and be familiar with RESTful API design principles, best practices, and Go idioms.

- Follow the user's requirements carefully & to the letter.
- Confirm the plan, then write code!
- Write correct, up-to-date, bug-free, fully functional, secure, and efficient Go code for APIs.
- Use the standard library when possible.
- Implement proper error handling, including custom error types when beneficial.
- Utilize Go's built-in concurrency features when beneficial for API performance.
- Include necessary imports, package declarations, and any required setup code.
- Implement proper logging using the standard library's log package or a simple custom logger.
- Implement rate limiting and authentication/authorization when appropriate, using standard library features or simple custom implementations.
- Be concise in explanations, but provide brief comments for complex logic or Go-specific idioms.
- If unsure about a best practice or implementation detail, say so instead of guessing.
- Offer suggestions for testing the API endpoints using Go's testing package.

Always prioritize security, scalability, and maintainability in your designs and implementations. Leverage the power and simplicity of Go's standard library to create efficient and idiomatic APIs.

# Code Style

- Use Go standard formatting (gofmt)
- Follow Go best practices and idioms
- Use meaningful variable and function names
- Keep functions focused and small
- Document public APIs with godoc comments

# Testing

- Write tests for all public APIs
- Use table-driven tests for multiple test cases
- Test both success and error cases
- Use subtests for better organization
- Mock external dependencies in tests
- Look at other tests in that package and then in the workspace for inspiration. This is specially useful settin up the tests.
- Favour `require` over `assert` from `testify` library.

# Error Handling
- Return descriptive errors with context
- Use error wrapping (fmt.Errorf with %w)
- Do not wrap with things like `failed to do something: %w`, simply wrap with `do something: %w`. Add some extra text if the context is not clear.
- Handle errors at appropriate levels
- Document error conditions in godoc

# Documentation

- Document all exported types, functions, and methods
- Include examples in godoc comments
- Document error conditions and edge cases
- Keep documentation up to date with code changes

# Security
- Never log sensitive information (tokens, passwords)
- Validate all input parameters
- Use secure defaults
- Follow security best practices for authentication

# Performance
- Minimize allocations in hot paths
- Use appropriate data structures
- Consider memory usage in large operations
- Profile performance-critical code

# Dependencies
- Minimize external dependencies
- Pin dependency versions
- Document dependency requirements
- Keep dependencies up to date

# Git Protocol
- Follow Git protocol specifications
- Handle all required Git protocol features
- Support both HTTP and HTTPS
- Implement proper authentication methods
- Look up the git document to better undertand how to implement low-level things. Here are some links: 
    * [Git on the Server - The Protocols](mdc:https:/git-scm.com/book/ms/v2/Git-on-the-Server-The-Protocols)
    * [Git Protocol v2](mdc:https:/git-scm.com/docs/protocol-v2)
    * [Pack Protocol](mdc:https:/git-scm.com/docs/pack-protocol)
    * [Git HTTP Backend](mdc:https:/git-scm.com/docs/git-http-backend)
    * [HTTP Protocol](mdc:https:/git-scm.com/docs/http-protocol)
    * [Git Protocol HTTP](mdc:https:/git-scm.com/docs/gitprotocol-http)
    * [Git Protocol v2](mdc:https:/git-scm.com/docs/gitprotocol-v2)
    * [Git Protocol Pack](mdc:https:/git-scm.com/docs/gitprotocol-pack)
    * [Git Protocol Common](mdc:https:/git-scm.com/docs/gitprotocol-common)

# Code Organization

- Keep related code together
- Use clear package boundaries
- Follow standard Go project layout
- Maintain clean interfaces

# Versioning
- Follow semantic versioning
- Document breaking changes
- Maintain changelog
- Tag releases appropriately

# CI/CD
- Run tests on all platforms
- Check code formatting
- Run linters
- Generate documentation

# Code Review
- Review for correctness
- Check error handling
- Verify test coverage
- Ensure documentation is complete
- Look for security issues

# Maintenance
- Keep code up to date
- Remove deprecated features
- Fix bugs promptly
- Address technical debt
- Monitor dependencies

# Accessibility
- Make error messages clear and actionable
- Provide helpful debug information
- Support different authentication methods
- Handle network issues gracefully

# Extensibility
- Design for future extensions
- Use interfaces for flexibility
- Allow customization where appropriate
- Document extension points 
