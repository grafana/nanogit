// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"io"
	"sync"

	"github.com/grafana/nanogit/protocol"
	"github.com/grafana/nanogit/protocol/client"
)

type FakeRawClient struct {
	FetchStub        func(context.Context, client.FetchOptions) (map[string]*protocol.PackfileObject, error)
	fetchMutex       sync.RWMutex
	fetchArgsForCall []struct {
		arg1 context.Context
		arg2 client.FetchOptions
	}
	fetchReturns struct {
		result1 map[string]*protocol.PackfileObject
		result2 error
	}
	fetchReturnsOnCall map[int]struct {
		result1 map[string]*protocol.PackfileObject
		result2 error
	}
	IsAuthorizedStub        func(context.Context) (bool, error)
	isAuthorizedMutex       sync.RWMutex
	isAuthorizedArgsForCall []struct {
		arg1 context.Context
	}
	isAuthorizedReturns struct {
		result1 bool
		result2 error
	}
	isAuthorizedReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	LsRefsStub        func(context.Context, client.LsRefsOptions) ([]protocol.RefLine, error)
	lsRefsMutex       sync.RWMutex
	lsRefsArgsForCall []struct {
		arg1 context.Context
		arg2 client.LsRefsOptions
	}
	lsRefsReturns struct {
		result1 []protocol.RefLine
		result2 error
	}
	lsRefsReturnsOnCall map[int]struct {
		result1 []protocol.RefLine
		result2 error
	}
	ReceivePackStub        func(context.Context, io.Reader) error
	receivePackMutex       sync.RWMutex
	receivePackArgsForCall []struct {
		arg1 context.Context
		arg2 io.Reader
	}
	receivePackReturns struct {
		result1 error
	}
	receivePackReturnsOnCall map[int]struct {
		result1 error
	}
	SmartInfoStub        func(context.Context, string) (io.ReadCloser, error)
	smartInfoMutex       sync.RWMutex
	smartInfoArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	smartInfoReturns struct {
		result1 io.ReadCloser
		result2 error
	}
	smartInfoReturnsOnCall map[int]struct {
		result1 io.ReadCloser
		result2 error
	}
	UploadPackStub        func(context.Context, io.Reader) (io.ReadCloser, error)
	uploadPackMutex       sync.RWMutex
	uploadPackArgsForCall []struct {
		arg1 context.Context
		arg2 io.Reader
	}
	uploadPackReturns struct {
		result1 io.ReadCloser
		result2 error
	}
	uploadPackReturnsOnCall map[int]struct {
		result1 io.ReadCloser
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRawClient) Fetch(arg1 context.Context, arg2 client.FetchOptions) (map[string]*protocol.PackfileObject, error) {
	fake.fetchMutex.Lock()
	ret, specificReturn := fake.fetchReturnsOnCall[len(fake.fetchArgsForCall)]
	fake.fetchArgsForCall = append(fake.fetchArgsForCall, struct {
		arg1 context.Context
		arg2 client.FetchOptions
	}{arg1, arg2})
	stub := fake.FetchStub
	fakeReturns := fake.fetchReturns
	fake.recordInvocation("Fetch", []interface{}{arg1, arg2})
	fake.fetchMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRawClient) FetchCallCount() int {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return len(fake.fetchArgsForCall)
}

func (fake *FakeRawClient) FetchCalls(stub func(context.Context, client.FetchOptions) (map[string]*protocol.PackfileObject, error)) {
	fake.fetchMutex.Lock()
	defer fake.fetchMutex.Unlock()
	fake.FetchStub = stub
}

func (fake *FakeRawClient) FetchArgsForCall(i int) (context.Context, client.FetchOptions) {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	argsForCall := fake.fetchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRawClient) FetchReturns(result1 map[string]*protocol.PackfileObject, result2 error) {
	fake.fetchMutex.Lock()
	defer fake.fetchMutex.Unlock()
	fake.FetchStub = nil
	fake.fetchReturns = struct {
		result1 map[string]*protocol.PackfileObject
		result2 error
	}{result1, result2}
}

func (fake *FakeRawClient) FetchReturnsOnCall(i int, result1 map[string]*protocol.PackfileObject, result2 error) {
	fake.fetchMutex.Lock()
	defer fake.fetchMutex.Unlock()
	fake.FetchStub = nil
	if fake.fetchReturnsOnCall == nil {
		fake.fetchReturnsOnCall = make(map[int]struct {
			result1 map[string]*protocol.PackfileObject
			result2 error
		})
	}
	fake.fetchReturnsOnCall[i] = struct {
		result1 map[string]*protocol.PackfileObject
		result2 error
	}{result1, result2}
}

func (fake *FakeRawClient) IsAuthorized(arg1 context.Context) (bool, error) {
	fake.isAuthorizedMutex.Lock()
	ret, specificReturn := fake.isAuthorizedReturnsOnCall[len(fake.isAuthorizedArgsForCall)]
	fake.isAuthorizedArgsForCall = append(fake.isAuthorizedArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.IsAuthorizedStub
	fakeReturns := fake.isAuthorizedReturns
	fake.recordInvocation("IsAuthorized", []interface{}{arg1})
	fake.isAuthorizedMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRawClient) IsAuthorizedCallCount() int {
	fake.isAuthorizedMutex.RLock()
	defer fake.isAuthorizedMutex.RUnlock()
	return len(fake.isAuthorizedArgsForCall)
}

func (fake *FakeRawClient) IsAuthorizedCalls(stub func(context.Context) (bool, error)) {
	fake.isAuthorizedMutex.Lock()
	defer fake.isAuthorizedMutex.Unlock()
	fake.IsAuthorizedStub = stub
}

func (fake *FakeRawClient) IsAuthorizedArgsForCall(i int) context.Context {
	fake.isAuthorizedMutex.RLock()
	defer fake.isAuthorizedMutex.RUnlock()
	argsForCall := fake.isAuthorizedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRawClient) IsAuthorizedReturns(result1 bool, result2 error) {
	fake.isAuthorizedMutex.Lock()
	defer fake.isAuthorizedMutex.Unlock()
	fake.IsAuthorizedStub = nil
	fake.isAuthorizedReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeRawClient) IsAuthorizedReturnsOnCall(i int, result1 bool, result2 error) {
	fake.isAuthorizedMutex.Lock()
	defer fake.isAuthorizedMutex.Unlock()
	fake.IsAuthorizedStub = nil
	if fake.isAuthorizedReturnsOnCall == nil {
		fake.isAuthorizedReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isAuthorizedReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeRawClient) LsRefs(arg1 context.Context, arg2 client.LsRefsOptions) ([]protocol.RefLine, error) {
	fake.lsRefsMutex.Lock()
	ret, specificReturn := fake.lsRefsReturnsOnCall[len(fake.lsRefsArgsForCall)]
	fake.lsRefsArgsForCall = append(fake.lsRefsArgsForCall, struct {
		arg1 context.Context
		arg2 client.LsRefsOptions
	}{arg1, arg2})
	stub := fake.LsRefsStub
	fakeReturns := fake.lsRefsReturns
	fake.recordInvocation("LsRefs", []interface{}{arg1, arg2})
	fake.lsRefsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRawClient) LsRefsCallCount() int {
	fake.lsRefsMutex.RLock()
	defer fake.lsRefsMutex.RUnlock()
	return len(fake.lsRefsArgsForCall)
}

func (fake *FakeRawClient) LsRefsCalls(stub func(context.Context, client.LsRefsOptions) ([]protocol.RefLine, error)) {
	fake.lsRefsMutex.Lock()
	defer fake.lsRefsMutex.Unlock()
	fake.LsRefsStub = stub
}

func (fake *FakeRawClient) LsRefsArgsForCall(i int) (context.Context, client.LsRefsOptions) {
	fake.lsRefsMutex.RLock()
	defer fake.lsRefsMutex.RUnlock()
	argsForCall := fake.lsRefsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRawClient) LsRefsReturns(result1 []protocol.RefLine, result2 error) {
	fake.lsRefsMutex.Lock()
	defer fake.lsRefsMutex.Unlock()
	fake.LsRefsStub = nil
	fake.lsRefsReturns = struct {
		result1 []protocol.RefLine
		result2 error
	}{result1, result2}
}

func (fake *FakeRawClient) LsRefsReturnsOnCall(i int, result1 []protocol.RefLine, result2 error) {
	fake.lsRefsMutex.Lock()
	defer fake.lsRefsMutex.Unlock()
	fake.LsRefsStub = nil
	if fake.lsRefsReturnsOnCall == nil {
		fake.lsRefsReturnsOnCall = make(map[int]struct {
			result1 []protocol.RefLine
			result2 error
		})
	}
	fake.lsRefsReturnsOnCall[i] = struct {
		result1 []protocol.RefLine
		result2 error
	}{result1, result2}
}

func (fake *FakeRawClient) ReceivePack(arg1 context.Context, arg2 io.Reader) error {
	fake.receivePackMutex.Lock()
	ret, specificReturn := fake.receivePackReturnsOnCall[len(fake.receivePackArgsForCall)]
	fake.receivePackArgsForCall = append(fake.receivePackArgsForCall, struct {
		arg1 context.Context
		arg2 io.Reader
	}{arg1, arg2})
	stub := fake.ReceivePackStub
	fakeReturns := fake.receivePackReturns
	fake.recordInvocation("ReceivePack", []interface{}{arg1, arg2})
	fake.receivePackMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRawClient) ReceivePackCallCount() int {
	fake.receivePackMutex.RLock()
	defer fake.receivePackMutex.RUnlock()
	return len(fake.receivePackArgsForCall)
}

func (fake *FakeRawClient) ReceivePackCalls(stub func(context.Context, io.Reader) error) {
	fake.receivePackMutex.Lock()
	defer fake.receivePackMutex.Unlock()
	fake.ReceivePackStub = stub
}

func (fake *FakeRawClient) ReceivePackArgsForCall(i int) (context.Context, io.Reader) {
	fake.receivePackMutex.RLock()
	defer fake.receivePackMutex.RUnlock()
	argsForCall := fake.receivePackArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRawClient) ReceivePackReturns(result1 error) {
	fake.receivePackMutex.Lock()
	defer fake.receivePackMutex.Unlock()
	fake.ReceivePackStub = nil
	fake.receivePackReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRawClient) ReceivePackReturnsOnCall(i int, result1 error) {
	fake.receivePackMutex.Lock()
	defer fake.receivePackMutex.Unlock()
	fake.ReceivePackStub = nil
	if fake.receivePackReturnsOnCall == nil {
		fake.receivePackReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.receivePackReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRawClient) SmartInfo(arg1 context.Context, arg2 string) (io.ReadCloser, error) {
	fake.smartInfoMutex.Lock()
	ret, specificReturn := fake.smartInfoReturnsOnCall[len(fake.smartInfoArgsForCall)]
	fake.smartInfoArgsForCall = append(fake.smartInfoArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.SmartInfoStub
	fakeReturns := fake.smartInfoReturns
	fake.recordInvocation("SmartInfo", []interface{}{arg1, arg2})
	fake.smartInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRawClient) SmartInfoCallCount() int {
	fake.smartInfoMutex.RLock()
	defer fake.smartInfoMutex.RUnlock()
	return len(fake.smartInfoArgsForCall)
}

func (fake *FakeRawClient) SmartInfoCalls(stub func(context.Context, string) (io.ReadCloser, error)) {
	fake.smartInfoMutex.Lock()
	defer fake.smartInfoMutex.Unlock()
	fake.SmartInfoStub = stub
}

func (fake *FakeRawClient) SmartInfoArgsForCall(i int) (context.Context, string) {
	fake.smartInfoMutex.RLock()
	defer fake.smartInfoMutex.RUnlock()
	argsForCall := fake.smartInfoArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRawClient) SmartInfoReturns(result1 io.ReadCloser, result2 error) {
	fake.smartInfoMutex.Lock()
	defer fake.smartInfoMutex.Unlock()
	fake.SmartInfoStub = nil
	fake.smartInfoReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeRawClient) SmartInfoReturnsOnCall(i int, result1 io.ReadCloser, result2 error) {
	fake.smartInfoMutex.Lock()
	defer fake.smartInfoMutex.Unlock()
	fake.SmartInfoStub = nil
	if fake.smartInfoReturnsOnCall == nil {
		fake.smartInfoReturnsOnCall = make(map[int]struct {
			result1 io.ReadCloser
			result2 error
		})
	}
	fake.smartInfoReturnsOnCall[i] = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeRawClient) UploadPack(arg1 context.Context, arg2 io.Reader) (io.ReadCloser, error) {
	fake.uploadPackMutex.Lock()
	ret, specificReturn := fake.uploadPackReturnsOnCall[len(fake.uploadPackArgsForCall)]
	fake.uploadPackArgsForCall = append(fake.uploadPackArgsForCall, struct {
		arg1 context.Context
		arg2 io.Reader
	}{arg1, arg2})
	stub := fake.UploadPackStub
	fakeReturns := fake.uploadPackReturns
	fake.recordInvocation("UploadPack", []interface{}{arg1, arg2})
	fake.uploadPackMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRawClient) UploadPackCallCount() int {
	fake.uploadPackMutex.RLock()
	defer fake.uploadPackMutex.RUnlock()
	return len(fake.uploadPackArgsForCall)
}

func (fake *FakeRawClient) UploadPackCalls(stub func(context.Context, io.Reader) (io.ReadCloser, error)) {
	fake.uploadPackMutex.Lock()
	defer fake.uploadPackMutex.Unlock()
	fake.UploadPackStub = stub
}

func (fake *FakeRawClient) UploadPackArgsForCall(i int) (context.Context, io.Reader) {
	fake.uploadPackMutex.RLock()
	defer fake.uploadPackMutex.RUnlock()
	argsForCall := fake.uploadPackArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRawClient) UploadPackReturns(result1 io.ReadCloser, result2 error) {
	fake.uploadPackMutex.Lock()
	defer fake.uploadPackMutex.Unlock()
	fake.UploadPackStub = nil
	fake.uploadPackReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeRawClient) UploadPackReturnsOnCall(i int, result1 io.ReadCloser, result2 error) {
	fake.uploadPackMutex.Lock()
	defer fake.uploadPackMutex.Unlock()
	fake.UploadPackStub = nil
	if fake.uploadPackReturnsOnCall == nil {
		fake.uploadPackReturnsOnCall = make(map[int]struct {
			result1 io.ReadCloser
			result2 error
		})
	}
	fake.uploadPackReturnsOnCall[i] = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeRawClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	fake.isAuthorizedMutex.RLock()
	defer fake.isAuthorizedMutex.RUnlock()
	fake.lsRefsMutex.RLock()
	defer fake.lsRefsMutex.RUnlock()
	fake.receivePackMutex.RLock()
	defer fake.receivePackMutex.RUnlock()
	fake.smartInfoMutex.RLock()
	defer fake.smartInfoMutex.RUnlock()
	fake.uploadPackMutex.RLock()
	defer fake.uploadPackMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRawClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ client.RawClient = new(FakeRawClient)
